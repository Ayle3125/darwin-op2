
#include "marathon.h"

Marathon::Marathon()
{
    imgRes = new FindLineResult();
    imgProc = new FindLine();

    m_execute = true;
    m_process_state = STRAIGHT;
    m_pre_action = 0;
    //TODO
    m_NoLineMaxCount = 6;
    m_no_line_found = 0;
    m_CurveJudgeCount = 3;
    m_curve_count = 0;
    m_StraightJudgeCount = 10;
    m_straight_count = 0;
    m_line_center_2D.X = -1;
    m_line_center_2D.Y = -1;
    m_CenterDiff = 30;
    m_line_theta = 0;
    m_CurveTheta = 77;//TODO

    m_NolookMaxTime = 5;
    m_nolooktime = 0;

    //TODO go straight first    
    m_FBstep = 10;
    m_FBstep_straight = 10;
    m_unit_FBstep = 0.3;
    m_MAX_FBstep = 30; 
    m_RLturn = 0.425;
    m_RLturn_goal = 0;
    m_RLturn_straight = 0.425;
    m_unit_RLturn = 2.0;
    m_MAX_RLturn = 35;
    m_RLstep_straight = 0;
    m_RLstep = 0;
    m_unit_RLstep = 0.3;
    m_MAX_RLstep = 30;

    debug_print = 1;
}

Marathon::~Marathon()
{
}

void Marathon::ThreadMotion(){
    motion = new Motion();

    motion->poseInit();
    Head::GetInstance()->MoveByAngle(0,-10);
    Walking::GetInstance()->Start();
    motion->walk(m_FBstep_straight, m_RLstep_straight, m_RLturn_straight);
    int tmp_img_result, tmp_RL_return;
    while ( m_execute ){//always true
        motion->CheckStatus();
        if ( debug_print ) fprintf(stderr,"state %d\n",m_process_state);
        if ( m_process_state == STRAIGHT ){
            if ( m_nolooktime < m_NolookMaxTime ){
                m_nolooktime++;
                m_FBstep += m_unit_FBstep;
                m_pre_action = 0;
                motion->walk(m_FBstep, m_RLstep, m_RLturn);
            }
            else {//if ( m_nolooktime < m_NolookMaxTime ) finish speed up
                if ( m_FBstep > m_FBstep_straight ) {//TODO
                    m_FBstep -= m_unit_FBstep;
                }
                tmp_img_result = GetImageResult();
                if ( tmp_img_result == -1 ){
                    if ( debug_print ) fprintf(stderr,"Can't find the track!\n");
                    m_no_line_found++;
                    LostDispose();
                }
                else {//tmp_img_result == -1 has find line
                    m_no_line_found = 0;
                    tmp_RL_return = RLFixed();// judge center first, avoid false judging curve track
                    if ( tmp_RL_return == 0 ){//haven't leave too much

                        if ( (m_line_theta < m_CurveTheta) && (m_line_theta> -1*m_CurveTheta) ){
                            m_curve_count++;
                            if ( m_curve_count > m_CurveJudgeCount ){
                                m_process_state = CURVE;
                            }
                        }
                        else {
                            m_curve_count = 0;
                            m_RLturn = m_RLturn_straight;
                        }                    

                    }
                    motion->walk(m_FBstep, m_RLstep, m_RLturn);
                }
            }
        }
        else if ( m_process_state == CURVE ){
            m_nolooktime = 0;
            m_FBstep = m_FBstep_straight;
            tmp_img_result = GetImageResult();
            if ( tmp_img_result == -1 ){
                LostDispose();
            }
            else {
                if ( ( m_line_theta>m_CurveTheta) || (m_line_theta<-1*m_CurveTheta) ){
                    m_straight_count++;
                    if ( m_straight_count > m_StraightJudgeCount ){
                        m_process_state = STRAIGHT;
                        m_FBstep = m_FBstep_straight; m_RLstep = m_RLstep_straight; m_RLturn = m_RLturn_straight;			
                    }
                }
                else {
                    m_straight_count = 0;
                    if ( m_line_theta < 0) {
                        if ( debug_print ) fprintf(stderr,"I should turn right\n");
                        m_RLturn_goal = -1*(m_line_theta + 90)/180  * m_MAX_RLturn;
                        m_pre_action = -1;
                        //m_RLturn = -4;
                    }
                    else {
                        if ( debug_print ) fprintf(stderr,"I should turn left\n");
                        m_RLturn_goal = (90 - m_line_theta )/180 * m_MAX_RLturn;
                        m_pre_action = 1;
                        //m_RLturn = 5;
                    } 
                    if(m_RLturn < m_RLturn_goal){
                        m_RLturn += m_unit_RLturn;
                    }
                    else{
                        m_RLturn -= m_unit_RLturn;
                    }
                    Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLturn;
                    // motion->walk(m_FBstep, m_RLstep, m_RLturn);
                }
            }
        }
    }
}

int Marathon::GetImageResult()
{
    while ( is_new_img == false ) usleep(8000);
    imgProc->imageProcess(frame,imgRes);
    FindLineResult *tmp_result = dynamic_cast<FindLineResult *>(imgRes);//TODO
    if ( tmp_result->valid == false ){
        return -1;
    }
    else {
        m_line_theta = ( tmp_result->slope ) *180/3.141592;
        m_line_center_2D.X = tmp_result->center.x;
        m_line_center_2D.Y = tmp_result->center.y;
        if ( debug_print ) fprintf(stderr,"theta:%lf  line center: %lf %lf \n",m_line_theta,m_line_center_2D.X,m_line_center_2D.Y);
    }
    is_new_img = false;
}

int Marathon::LostDispose()
{    
    if ( debug_print ) fprintf(stderr,"I should dispose the lost\n");
    if ( m_process_state == CURVE ){
        if ( m_pre_action == 1 ){
            motion->walk(10,0,5);// turn left
        }
        else if ( m_pre_action == -1 ){
            motion->walk(10,0,-4);// turn right
        }
        else {
            motion->walk(-10,0,-5);// go back
        }
    }
    else if ( m_process_state == STRAIGHT ){
        if ( m_pre_action == 1 ){
            motion->walk(1, -10 ,-5);// move left
        }
        else if ( m_pre_action == -1 ){
            motion->walk(1, 10,-5);// move right
        }
        else {
            motion->walk(-10,0,-5);// go back
        } 
    }
    usleep(8*8000);
}

int Marathon::RLFixed()
{
    int tmp_return = 0;
    double diff = m_line_center_2D.X - ( IMG_WIDTH/2 );
    if ( fabs ( diff  ) > m_CenterDiff ){
        tmp_return =1;
        m_RLturn_goal=  -1*m_MAX_RLturn * 0.5*diff / ( IMG_WIDTH/2 );//change Y
        m_pre_action = 1;
        if ( diff > 0 ){
            m_pre_action *=-1;
        }
        if(m_RLturn < m_RLturn_goal){
            m_RLturn += 0.5*m_unit_RLturn;
        }
        else{
            m_RLturn -= 0.5*m_unit_RLturn;
        }
    }
    if ( debug_print ) fprintf(stderr,"RLfix:turn: %lf\n", m_RLturn);
    return tmp_return;
}
